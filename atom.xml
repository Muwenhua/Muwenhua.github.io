<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://muwenhua.github.io</id>
    <title>Rain_blog</title>
    <updated>2020-12-23T05:31:36.365Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://muwenhua.github.io"/>
    <link rel="self" href="https://muwenhua.github.io/atom.xml"/>
    <subtitle>做了人类想成仙，生在地上要上天。</subtitle>
    <logo>https://muwenhua.github.io/images/avatar.png</logo>
    <icon>https://muwenhua.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Rain_blog</rights>
    <entry>
        <title type="html"><![CDATA[JAVA华为云部分代码]]></title>
        <id>https://muwenhua.github.io/post/java-hua-wei-yun-bu-fen-dai-ma/</id>
        <link href="https://muwenhua.github.io/post/java-hua-wei-yun-bu-fen-dai-ma/">
        </link>
        <updated>2020-12-23T04:38:45.000Z</updated>
        <content type="html"><![CDATA[<p><strong>子类与继承 作业1</strong></p>
<p>SIM</p>
<p>import java.util.Scanner;</p>
<p>public class Example5_13 {</p>
<p>public static void main(String args[]) {</p>
<p>​    MobileTelephone telephone = new MobileTelephone ();</p>
<p>​    SIM sim=new SIMOfChinaMobile();</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    System.out.println(&quot;请输入移动卡手机号：&quot;);</p>
<p>​    sim.setNumber(scanner.next());</p>
<p>​    telephone.useSIM(sim);</p>
<p>​    telephone.showMess();</p>
<p>​    sim=new SIMOfChinaUnicom();</p>
<p>​    System.out.println(&quot;请输入联通手机号：&quot;);</p>
<p>​    sim.setNumber(scanner.next());</p>
<p>​    telephone.useSIM(sim);</p>
<p>​    telephone.showMess();</p>
<p>}</p>
<p>}</p>
<p>abstract class SIM {</p>
<p>public abstract void setNumber(String n);</p>
<p>public abstract String giveNumber();</p>
<p>public abstract String giveCorpName();</p>
<p>}</p>
<p>class SIMOfChinaMobile extends SIM {</p>
<p>String number;</p>
<p>public void setNumber(String n) {</p>
<p>​    number = n;</p>
<p>}</p>
<p>public String giveNumber() {</p>
<p>​    return number;</p>
<p>}</p>
<p>public String giveCorpName() {</p>
<p>​    return &quot;中国移动&quot;;</p>
<p>}</p>
<p>}</p>
<p>class SIMOfChinaUnicom extends SIM {</p>
<p>String number;</p>
<p>public void setNumber(String n) {</p>
<p>​    number = n;</p>
<p>}</p>
<p>public String giveNumber() {</p>
<p>​    return number;</p>
<p>}</p>
<p>public String giveCorpName() {</p>
<p>​    return &quot;联通&quot;;</p>
<p>}</p>
<p>}</p>
<p>class MobileTelephone {</p>
<p>SIM card;</p>
<p>public void useSIM(SIM card) {</p>
<p>​    this.card=card;</p>
<p>}</p>
<p>public void showMess() {</p>
<p>​    System.out.println(&quot;使用的卡是:&quot;+card.giveCorpName()+&quot;提供的&quot;);</p>
<p>​    System.out.println(&quot;手机号码是:&quot;+card.giveNumber());</p>
<p>}</p>
<p>}</p>
<p><strong>平均数</strong></p>
<p>import java.util.Scanner;</p>
<p>public class Example5_7 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Average aver=new Average();</p>
<p>​    System.out.println(&quot;请输入一个数n&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    aver.n = scanner.nextInt();</p>
<p>​    float resultOne=aver.f();</p>
<p>​    float resultTwo=aver.g();</p>
<p>​    System.out.println(&quot;resultOne=&quot;+resultOne);</p>
<p>​    System.out.println(&quot;resultTwo=&quot;+resultTwo);</p>
<p>}</p>
<p>}</p>
<p>class Sum {</p>
<p>int n;</p>
<p>float f() {</p>
<p>​    float sum=0;</p>
<p>​    for(int i=1;i&lt;=n;i++)</p>
<p>​      sum=sum+i;</p>
<p>​    return sum;</p>
<p>}</p>
<p>}</p>
<p>class Average extends Sum {</p>
<p>int n;</p>
<p>float f() {</p>
<p>​    float c;</p>
<p>​    super.n=n;</p>
<p>​    c=super.f();</p>
<p>​    return c/n;</p>
<p>}</p>
<p>float g() {</p>
<p>​    float c;</p>
<p>​    c=super.f();</p>
<p>​    return c/2;</p>
<p>}</p>
<p>}</p>
<p><strong>输入字符串打印输出</strong></p>
<p>import java.util.Scanner;</p>
<p>public class Example5_8 {</p>
<p>public static void main(String args[]) {</p>
<p>​    System.out.println(&quot;请输入姓名:&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    String next = scanner.next();</p>
<p>​    System.out.println(&quot;请输入年龄:&quot;);</p>
<p>​    int nextInt =scanner.nextInt();</p>
<p>​    System.out.println(&quot;请输入婚否：&quot;);</p>
<p>​    String next1 = scanner.next();</p>
<p>​    UniverStudent zhang=new UniverStudent(nextInt,next,next1);</p>
<p>}</p>
<p>}</p>
<p>class Student {</p>
<p>int number;String name;</p>
<p>Student() {</p>
<p>}</p>
<p>Student(int number,String name) {</p>
<p>​    this.number=number;</p>
<p>​    this.name=name;</p>
<p>​    System.out.println(&quot;我的名字是:&quot;+name+ &quot;学号是:&quot;+number);</p>
<p>}</p>
<p>}</p>
<p>class UniverStudent extends Student {</p>
<p>String marriage;</p>
<p>UniverStudent(int number,String name,String b) {</p>
<p>​    super(number,name);</p>
<p>​    marriage=b;</p>
<p>​    System.out.println(&quot;婚否=&quot;+marriage);</p>
<p>}</p>
<p>}</p>
<p><strong>计算圆的面积</strong></p>
<p>import java.util.Scanner;</p>
<p>public class Example5_9 {</p>
<p>public static void main(String args[]) {</p>
<p>​    A a=new A();</p>
<p>​    System.out.println(&quot;请输入圆半径：&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    System.out.println(&quot;面积：&quot;+a.getArea(scanner.nextDouble()));</p>
<p>}</p>
<p>}</p>
<p>class A {</p>
<p>final double PI=3.1415926;// PI是常量</p>
<p>public double getArea(final double r) {</p>
<p>​    return PI<em>r</em>r;</p>
<p>}</p>
<p>}</p>
<p><strong>输入字符串和两个数字</strong></p>
<p>import java.util.Scanner;</p>
<p>public class Example5_10 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Anthropoid monkey;</p>
<p>​    People geng = new People();</p>
<p>​    monkey = geng ; //monkey是People对象geng的上转型对象</p>
<p>​    System.out.println(&quot;请输入字符串 &quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    monkey.crySpeak(scanner.next());</p>
<p>​    People people=(People)monkey; //把上转型对象强制转化为子类的对象</p>
<p>​    System.out.println(&quot;请输入两个数字：&quot;);</p>
<p>​    people.computer(scanner.nextInt(),scanner.nextInt());</p>
<p>}</p>
<p>}</p>
<p>class Anthropoid {</p>
<p>void crySpeak(String s) {</p>
<p>​    System.out.println(s);</p>
<p>}</p>
<p>}</p>
<p>class People extends Anthropoid {</p>
<p>void computer(int a,int b) {</p>
<p>​    int c=a*b;</p>
<p>​    System.out.println(c);</p>
<p>}</p>
<p>void crySpeak(String s) {</p>
<p>​    System.out.println(&quot;***&quot;+s+&quot;***&quot;);</p>
<p>}</p>
<p>}</p>
<p><strong>对输入字符进行打印</strong></p>
<p>import java.util.Scanner;</p>
<p>public class Example5_11 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Animal animal;</p>
<p>​    animal = new Dog();</p>
<p>​    System.out.println(&quot;请输入狗叫：&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    animal.cry(scanner.next());</p>
<p>​    animal=new Cat();</p>
<p>​    System.out.println(&quot;请输入猫叫：&quot;);</p>
<p>​    animal.cry(scanner.next());</p>
<p>}</p>
<p>}</p>
<p>class Animal {</p>
<p>void cry(String call) {</p>
<p>}</p>
<p>}</p>
<p>class Dog extends Animal {</p>
<p>void cry(String call) {</p>
<p>​    System.out.println(call);</p>
<p>}</p>
<p>}</p>
<p>class Cat extends Animal {</p>
<p>void cry(String call) {</p>
<p>​    System.out.println(call);</p>
<p>}</p>
<p>}</p>
<p><strong>对输入字符串进行打印</strong></p>
<p>import java.util.Scanner;</p>
<p>public class Example5_12 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    GirlFriend girl = new ChinaGirlFriend(); //girl是上转型对象</p>
<p>​    Boy boy = new Boy();</p>
<p>​    boy.setGirlfriend(girl);</p>
<p>​    boy.showGirlFriend(scanner);</p>
<p>​    girl = new AmericanGirlFriend(); //girl是上转型对象</p>
<p>​    boy.setGirlfriend(girl);</p>
<p>​    boy.showGirlFriend(scanner);</p>
<p>}</p>
<p>}</p>
<p>abstract class GirlFriend {</p>
<p>abstract void speak(Scanner scanner);</p>
<p>abstract void cooking(Scanner scanner);</p>
<p>}</p>
<p>class ChinaGirlFriend extends GirlFriend {</p>
<p>void speak(Scanner scanner){</p>
<p>​    System.out.println(&quot;请输入中国女孩说的话:&quot;);</p>
<p>​    System.out.println(scanner.next());</p>
<p>}</p>
<p>void cooking(Scanner scanner){</p>
<p>​    System.out.println(&quot;请输入中国女孩做的饭:&quot;);</p>
<p>​    System.out.println(scanner.next());</p>
<p>}</p>
<p>}</p>
<p>class AmericanGirlFriend extends GirlFriend {</p>
<p>void speak(Scanner scanner){</p>
<p>​    System.out.println(&quot;请输入美国女孩说的话:&quot;);</p>
<p>​    System.out.println(scanner.next());</p>
<p>}</p>
<p>void cooking(Scanner scanner){</p>
<p>​    System.out.println(&quot;请输入美国女孩做的饭:&quot;);</p>
<p>​    System.out.println(scanner.next());</p>
<p>}</p>
<p>}</p>
<p>class Boy {</p>
<p>GirlFriend friend;</p>
<p>void setGirlfriend(GirlFriend f){</p>
<p>​    friend = f;</p>
<p>}</p>
<p>void showGirlFriend(Scanner scanner) {</p>
<p>​    friend.speak(scanner);</p>
<p>​    friend.cooking(scanner);</p>
<p>}</p>
<p>}</p>
<p><strong>二 接口</strong></p>
<p><em>计算输入数字的和</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example6_1 {</p>
<p>public static void main(String args[]) {</p>
<p>​    China zhang;</p>
<p>​    Japan henlu;</p>
<p>​    zhang=new China();</p>
<p>​    henlu=new Japan();</p>
<p>​    System.out.println(&quot;输入zhang的学号、数字n（计算1..n的和）：&quot;);</p>
<p>​    System.out.println(&quot;输入henlu的学号、数字n（计算n+MAX的和）：&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    int a,b;</p>
<p>​    a=scanner.nextInt();</p>
<p>​    b=scanner.nextInt();</p>
<p>​    int c,d;</p>
<p>​    d = scanner.nextInt();</p>
<p>​    c = scanner.nextInt();</p>
<p>​    zhang.number=a+Computable.MAX;</p>
<p>​    henlu.number=c+Computable.MAX;</p>
<p>​    System.out.println(&quot;----------输出-----------&quot;);</p>
<p>​    System.out.println(&quot;zhang的学号&quot;+zhang.number+&quot;,zhang求和结果&quot;+zhang.f(b));</p>
<p>​    System.out.println(&quot;henlu的学号&quot;+henlu.number+&quot;,henlu求和结果&quot;+henlu.f(d));</p>
<p>}</p>
<p>}</p>
<p>interface Computable {</p>
<p>int MAX = 46;</p>
<p>int f(int x);</p>
<p>}</p>
<p>class China implements Computable { //China类实现Computable接口</p>
<p>int number;</p>
<p>public int f(int x) { //不要忘记public关键字</p>
<p>​    int sum=0;</p>
<p>for(int i=1;i&lt;=x;i++) {</p>
<p>​    sum=sum+i;</p>
<p>}</p>
<p>return sum;</p>
<p>}</p>
<p>}</p>
<p>class Japan implements Computable { //Japan类实现Computable接口</p>
<p>int number;</p>
<p>public int f(int x) {</p>
<p>​    return MAX+x;</p>
<p>}</p>
<p>}</p>
<p><em>对输入的字符串进行打印输出</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example6_2 {</p>
<p>public static void main(String args[]) {</p>
<p>​    ShowMessage sm;         //声明接口变量</p>
<p>​    sm=new TV();           //接口变量中存放对象的引用</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    System.out.println(&quot;请输入TV的商标&quot;);</p>
<p>​    sm.show(scanner.next());   //接口回调。</p>
<p>​    sm=new PC();           //接口变量中存放对象的引用</p>
<p>​    System.out.println(&quot;请输入PC的商标&quot;);</p>
<p>​    sm.show(scanner.next()); //接口回调</p>
<p>}</p>
<p>}</p>
<p>interface ShowMessage {</p>
<p>void show(String s);</p>
<p>}</p>
<p>class TV implements ShowMessage {</p>
<p>public void show(String s) {</p>
<p>​    System.out.println(s);</p>
<p>}</p>
<p>}</p>
<p>class PC implements ShowMessage {</p>
<p>public void show(String s) {</p>
<p>​    System.out.println(s);</p>
<p>}</p>
<p>}</p>
<p><em>对输入的字符串进行拼接打印输出</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example6_3 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    Bus bus101 = new Bus();</p>
<p>​    Taxi buleTaxi = new Taxi();</p>
<p>​    Cinema redStarCinema = new Cinema();</p>
<p>​    MoneyFare fare;</p>
<p>​    ControlTemperature temperature;</p>
<p>​    fare = bus101;</p>
<p>​    System.out.println(&quot;请输入公交车采用刹车技术和车票价（元）：&quot;);</p>
<p>​    bus101.brake(scanner.next());</p>
<p>​    fare.charge(scanner.next());</p>
<p>​    fare = buleTaxi;</p>
<p>​    temperature = buleTaxi;</p>
<p>​    System.out.println(&quot;请输入出租车采用刹车技术、车票价（元）、安装空调样式：&quot;);</p>
<p>​    buleTaxi.brake(scanner.next());</p>
<p>​    fare.charge(scanner.next());</p>
<p>​    temperature.controlAirTemperature(scanner.next());</p>
<p>​    fare = redStarCinema;</p>
<p>​    temperature = redStarCinema;</p>
<p>​    System.out.println(&quot;请输入电影院票价（元）、安装空调样式：&quot;);</p>
<p>​    fare.charge(scanner.next());</p>
<p>​    temperature.controlAirTemperature(scanner.next());</p>
<p>}</p>
<p>}</p>
<p>abstract class MotorVehicles {</p>
<p>abstract void brake(String s);</p>
<p>}</p>
<p>interface MoneyFare {</p>
<p>void charge(String c);</p>
<p>}</p>
<p>interface ControlTemperature {</p>
<p>void controlAirTemperature(String t);</p>
<p>}</p>
<p>class Bus extends MotorVehicles implements MoneyFare {</p>
<p>void brake(String s) {</p>
<p>​    System.out.println(&quot;公共汽车使用&quot;+s+&quot;刹车技术&quot;);</p>
<p>}</p>
<p>public void charge(String c) {</p>
<p>​    System.out.println(&quot;公共汽车:&quot;+c+&quot;元/张,不计算公里数&quot;);</p>
<p>}</p>
<p>}</p>
<p>class Taxi extends MotorVehicles implements MoneyFare,ControlTemperature {</p>
<p>void brake(String s) {</p>
<p>​    System.out.println(&quot;出租车使用&quot;+s+&quot;刹车技术&quot;);</p>
<p>}</p>
<p>public void charge(String c) {</p>
<p>​    System.out.println(&quot;出租车:&quot;+c+&quot;元/公里,起价3公里&quot;);</p>
<p>}</p>
<p>public void controlAirTemperature(String t) {</p>
<p>​    System.out.println(&quot;出租车安装了&quot;+t+&quot;空调&quot;);</p>
<p>}</p>
<p>}</p>
<p>class Cinema implements MoneyFare,ControlTemperature {</p>
<p>public void charge(String s) {</p>
<p>​    System.out.println(&quot;电影院:门票,&quot;+s+&quot;元/张&quot;);</p>
<p>}</p>
<p>public void controlAirTemperature(String t) {</p>
<p>​    System.out.println(&quot;电影院安装了&quot;+t+&quot;空调&quot;);</p>
<p>}</p>
<p>}</p>
<p><em>计算两个数的算数平均值和几何平均值</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example6_4 {</p>
<p>public static void main(String args[]) {</p>
<p>​    CompurerAverage computer;</p>
<p>​    double a=11.23,b=22.78;</p>
<p>​    computer = new A();</p>
<p>​    System.out.println(&quot;请输入两个数：&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    a = scanner.nextDouble();</p>
<p>​    b = scanner.nextDouble();</p>
<p>​    double result = computer.average(a,b);</p>
<p>​    System.out.printf(&quot;%5.2f和%5.2f的算术平均值:%5.2f\n&quot;,a,b,result);</p>
<p>​    computer = new B();</p>
<p>​    result= computer.average(a,b);</p>
<p>​    System.out.printf(&quot;%5.2f和%5.2f的几何平均值:%5.2f&quot;,a,b,result);</p>
<p>}</p>
<p>}</p>
<p>interface CompurerAverage {</p>
<p>public double average(double a,double b);</p>
<p>}</p>
<p>class A implements CompurerAverage {</p>
<p>public double average(double a,double b) {</p>
<p>​    double aver=0;</p>
<p>​    aver=(a+b)/2;</p>
<p>​    return aver;</p>
<p>}</p>
<p>}</p>
<p>class B implements CompurerAverage {</p>
<p>public double average(double a,double b) {</p>
<p>​    double aver=0;</p>
<p>​    aver=Math.sqrt(a*b);</p>
<p>​    return aver;</p>
<p>}</p>
<p>}</p>
<p><em>函数提示语句，打印字符串，打印输出</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example6_5 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    KindHello kindHello=new KindHello();</p>
<p>​    kindHello.lookHello(new Chinese(), scanner);</p>
<p>​    kindHello.lookHello(new English(), scanner);</p>
<p>}</p>
<p>}</p>
<p>interface SpeakHello {</p>
<p>void speakHello(Scanner scanner);</p>
<p>}</p>
<p>class Chinese implements SpeakHello {</p>
<p>public void speakHello(Scanner scanner) {</p>
<p>​    System.out.println(&quot;中国人习惯问候语：&quot;);</p>
<p>​    System.out.println(&quot;中国人习惯问候语：&quot;+scanner.nextLine());</p>
<p>}</p>
<p>}</p>
<p>class English implements SpeakHello {</p>
<p>public void speakHello(Scanner scanner) {</p>
<p>​    System.out.println(&quot;英国人习惯问候语:&quot;);</p>
<p>​    System.out.println(&quot;英国人习惯问候语:&quot;+scanner.nextLine());</p>
<p>}</p>
<p>}</p>
<p>class KindHello {</p>
<p>public void lookHello(SpeakHello hello,Scanner scanner) { //接口类型参数</p>
<p>​    hello.speakHello(scanner);          //接口回调</p>
<p>}</p>
<p>}</p>
<p><em>实现多态</em></p>
<p>import java.util.Scanner;</p>
<p>//基类Shape建立了一个通用接口——也就是说，所有（几何）形状都可以描绘和删除。</p>
<p>class Shape {</p>
<p>void draw() {</p>
<p>}</p>
<p>void erase() {</p>
<p>}</p>
<p>}</p>
<p>//派生类覆盖了draw方法，为每种特殊类型的几何形状都提供了独一无二的行为。</p>
<p>class Circle extends Shape {</p>
<p>@Override // @Override注解，表示覆盖父类方法</p>
<p>void draw() {</p>
<p>​    System.out.println(&quot;Circle.draw()&quot;);</p>
<p>}</p>
<p>@Override</p>
<p>void erase() {</p>
<p>​    System.out.println(&quot;Circle.erase()&quot;);</p>
<p>}</p>
<p>}</p>
<p>class Square extends Shape {</p>
<p>@Override</p>
<p>void draw() {</p>
<p>​    System.out.println(&quot;Square.draw()&quot;);</p>
<p>}</p>
<p>@Override</p>
<p>void erase() {</p>
<p>​    System.out.println(&quot;Square.erase()&quot;);</p>
<p>}</p>
<p>}</p>
<p>class Triangle extends Shape {</p>
<p>@Override</p>
<p>void draw() {</p>
<p>​    System.out.println(&quot;Triangle.draw()&quot;);</p>
<p>}</p>
<p>@Override</p>
<p>void erase() {</p>
<p>​    System.out.println(&quot;Triangle.erase()&quot;);</p>
<p>}</p>
<p>}</p>
<p>//下面对动态绑定进行测试如下：</p>
<p>public class Example7_100 {</p>
<p>public static void main(String[] args) {</p>
<p>​    Scanner reader = new Scanner(System.in);</p>
<p>​    Shape[] shape = new Shape[3];</p>
<p>​    int n;</p>
<p>​    for (int i = 0; i &lt; shape.length; i++) {</p>
<p>​      n = reader.nextInt();</p>
<p>​      switch (n) {</p>
<p>​        case 0:</p>
<p>​          shape[i] = new Circle();</p>
<p>​          break;</p>
<p>​        case 1:</p>
<p>​          shape[i] = new Square();</p>
<p>​          break;</p>
<p>​        case 2:</p>
<p>​          shape[i] = new Triangle();</p>
<p>​      }</p>
<p>​    }</p>
<p>​    for (Shape oneS : shape) { // 增强for循环，应在JDK 5及其以上版本运行</p>
<p>​      oneS.draw();</p>
<p>​    }</p>
<p>}</p>
<p>}</p>
<p><em>抽象类的运用</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example7_101 {</p>
<p>static public void main(String[] args) {</p>
<p>​    Scanner reader = new Scanner(System.in);</p>
<p>​    Driver a = new FemaleDriver(reader.nextInt());</p>
<p>​    Driver b = new MaleDriver();</p>
<p>​    a.drives();</p>
<p>​    b.drives();</p>
<p>}</p>
<p>}</p>
<p>class FemaleDriver extends Driver {</p>
<p>public FemaleDriver(int a) {</p>
<p>}</p>
<p>@Override</p>
<p>public void drives() {</p>
<p>​    System.out.println(&quot;A Female driver drives a vehicle.&quot;);</p>
<p>}</p>
<p>}</p>
<p>class MaleDriver extends Driver {</p>
<p>public MaleDriver() {</p>
<p>}</p>
<p>@Override</p>
<p>public void drives() {</p>
<p>​    System.out.println(&quot;A male driver drives a vehicle.&quot;);</p>
<p>}</p>
<p>}</p>
<p>abstract class Driver {</p>
<p>public Driver() {</p>
<p>​</p>
<p>}</p>
<p>public abstract void drives();</p>
<p>}</p>
<p><strong>三 内部类与异常类-作业1</strong></p>
<p><em>计算输入4个数的和</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example7_6 {</p>
<p>public static void main (String args[ ]) {</p>
<p>​    int [] score ={0,0,0,0};</p>
<p>​    System.out.println(&quot;请输入3个正数,1个负数&quot;);</p>
<p>​    Scanner scanner = new Scanner(System.in);</p>
<p>​    for(int i=0;i&lt;4;i++){</p>
<p>​      score[i] = scanner.nextInt();</p>
<p>​    }</p>
<p>​    int sum=0;</p>
<p>​    for(int number:score) {</p>
<p>​      assert number&gt;0:&quot;负数不能是成绩&quot;;</p>
<p>​      sum=sum+number;</p>
<p>​    }</p>
<p>​    System.out.println(&quot;总成绩:&quot;+sum);</p>
<p>}</p>
<p>}</p>
<p><em>处理数组越界异常</em></p>
<p>import java.util.Scanner;</p>
<p>/**</p>
<p>* TODO: 定义一个长度为8的课程数组，随机输入课程的序号，获取课程的名称，进行输出，如果不存在则捕捉数组越界的异常</p>
<p>* 如：输入：12，12已结超过8门课程的范围，捕获异常后打印： java.lang.ArrayIndexOutOfBoundsException: 12</p>
<p>*  输入：2，输出：英语</p>
<p>*/</p>
<p>public class Example7_149 {</p>
<p>public static void main(String[] args) {</p>
<p>​    Scanner sc = new Scanner(System.in);</p>
<p>​    System.out.println(&quot;输入课程的序号&quot;);</p>
<p>​    int index = sc.nextInt();</p>
<p>​    String[] courses = {&quot;数学&quot;,&quot;语文&quot;,&quot;英语&quot;,&quot;计算机&quot;,&quot;物理&quot;,&quot;化学&quot;,&quot;生物&quot;,&quot;地理&quot;};</p>
<p>​    try {</p>
<p>​      String course = courses[index];</p>
<p>​</p>
<p>​      System.out.println(course);</p>
<p>​</p>
<p>​    //TODO:输入课程的序号,超过数组最大长度，捕捉数组越界异常</p>
<p>​    } catch (ArrayIndexOutOfBoundsException e) {</p>
<p>​      System.out.println(e);</p>
<p>​    }</p>
<p>}</p>
<p>}</p>
<p><em>自定义异常</em></p>
<p>import java.util.Scanner;</p>
<p>/**</p>
<p>* TODO: 输入账号名称，如果大于10，抛出“账号名称超长”的自定义异常， 如果小于5，抛出“账号名称超短”的自定义异常</p>
<p>* 参考“账号名称超长异常（StringTooLongException）”，请编写一个账号名称超短的自定义异常（类名：StringTooShortException）</p>
<p>* 例如：输入：红色宝马  输出： StringTooShortException: 账号名称超短，必须大于5个字符</p>
<p>* 例如：输入：红红黄黄蓝蓝  输出：账号名称校验通过</p>
<p>* 例如：输入：红红黄黄蓝蓝绿绿紫紫白白  输出：StringTooLongException: 账号名称超长，必须小于10个字符</p>
<p>*/</p>
<p>public class Example7_152 {</p>
<p>public static void main(String[] args) {</p>
<p>​    Scanner sc = new Scanner(System.in);</p>
<p>​    System.out.println(&quot;输入账号名称&quot;);</p>
<p>​    String str = sc.next();</p>
<p>​    try {</p>
<p>​      if (str.length() &gt; 10) {</p>
<p>​        //抛出账号名称超长的自定义异常</p>
<p>​        throw new StringTooLongException();</p>
<p>​      }</p>
<p>​      if (str.length() &lt; 5){</p>
<p>​        //抛出账号名称超短的自定义异常</p>
<p>​        throw new StringTooShortException();</p>
<p>​      }</p>
<p>​      System.out.println(&quot;账号名称校验通过&quot;);</p>
<p>​    } catch (Exception e) {</p>
<p>​      System.out.println(e);</p>
<p>​    }</p>
<p>}</p>
<p>}</p>
<p>/**</p>
<p>* 自定义异常，账号名称超长异常</p>
<ul>
<li></li>
</ul>
<p>*/</p>
<p>class StringTooLongException extends Exception{</p>
<p>public StringTooLongException(){</p>
<p>​    super(&quot;账号名称超长，必须小于10个字符&quot;);</p>
<p>}</p>
<p>}</p>
<p>/**</p>
<p>* 自定义异常，账号名称超短异常</p>
<ul>
<li></li>
</ul>
<p>*/</p>
<p>class StringTooShortException extends Exception{</p>
<p>public StringTooShortException(){</p>
<p>​    super(&quot;账号名称超短，必须大于5个字符&quot;);</p>
<p>}</p>
<p>}</p>
<p><em>自定义异常类，计算银行收入、支出</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example7_5 {</p>
<p>public static void main(String args[]) {</p>
<p>​    Bank bank=new Bank();</p>
<p>​    try{</p>
<p>​      System.out.println(&quot;请输入银行收入、支出（收入正数 支出负数）😊;</p>
<p>​      Scanner scanner = new Scanner(System.in);</p>
<p>​      bank.income(scanner.nextInt(),scanner.nextInt());</p>
<p>​      System.out.printf(&quot;银行目前有%d元\n&quot;,bank.getMoney());</p>
<p>​      System.out.println(&quot;请输入银行收入、支出（收入负数或支出正数）😊;</p>
<p>​      bank.income(scanner.nextInt(),scanner.nextInt());</p>
<p>​    }</p>
<p>​    catch(BankException e) {</p>
<p>​      System.out.println(&quot;计算收益的过程出现如下问题:&quot;);</p>
<p>​      System.out.println(e.warnMess());</p>
<p>​    }</p>
<p>​    System.out.printf(&quot;银行目前有%d元\n&quot;,bank.getMoney());</p>
<p>}</p>
<p>}</p>
<p>class Bank {</p>
<p>private int money;</p>
<p>public void income(int in,int out) throws BankException {</p>
<p>​    if(in&lt;=0||out&gt;=0||in+out&lt;=0) {</p>
<p>​      throw new BankException(in,out); //方法抛出异常，导致方法结束</p>
<p>​    }</p>
<p>​    int netIncome=in+out;</p>
<p>​    System.out.printf(&quot;本次计算出的纯收入是:%d元\n&quot;,netIncome);</p>
<p>​    money=money+netIncome;</p>
<p>}</p>
<p>public int getMoney() {</p>
<p>​    return money;</p>
<p>}</p>
<p>}</p>
<p>class BankException extends Exception {</p>
<p>String message;</p>
<p>public BankException(int m,int n) {</p>
<p>​    message=&quot;入账资金&quot;+m+&quot;是负数或支出&quot;+n+&quot;是正数，不符合系统要求.&quot;;</p>
<p>}</p>
<p>public String warnMess() {</p>
<p>​    return message;</p>
<p>}</p>
<p>}</p>
<p><em>输入三个数字，其中第二个数字为...</em></p>
<p>import java.util.Scanner;</p>
<p>public class Example7_4 {</p>
<p>public static void main(String args[ ]) {</p>
<p>​    int n = 0,m = 0,t = 1000;</p>
<p>​    try{</p>
<p>​      System.out.println(&quot;初始化n=0 m=0 t=1000&quot;);</p>
<p>​      System.out.println(&quot;请输入三个数给n,m,t赋值（其中输入m非法数字）&quot;);</p>
<p>​      Scanner scanner = new Scanner(System.in);</p>
<p>​      n = Integer.parseInt(scanner.next());</p>
<p>​      m = Integer.parseInt(scanner.next());</p>
<p>​      t = Integer.parseInt(scanner.next()); //t没有机会被赋值</p>
<p>​    }</p>
<p>​    catch(NumberFormatException e) {</p>
<p>​      System.out.println(&quot;发生异常:&quot;+e.getMessage());</p>
<p>​    }</p>
<p>​    System.out.println(&quot;n=&quot;+n+&quot;,m=&quot;+m+&quot;,t=&quot;+t);</p>
<p>​    try{</p>
<p>​      System.out.println(&quot;故意抛出I/O异常！&quot;);</p>
<p>​      throw new java.io.IOException(&quot;我是故意的&quot;);</p>
<p>​      //System.out.println(&quot;这个输出语句肯定没有机会执行,所以必须注释掉，否则编译出错&quot;);</p>
<p>​    }</p>
<p>​    catch(java.io.IOException e) {</p>
<p>​      System.out.println(&quot;发生异常:&quot;+e.getMessage());</p>
<p>​    }</p>
<p>}</p>
<p>}</p>
<p><em>根据输入装载量，计算货车</em></p>
<p>import java.util.Scanner;</p>
<p>class DangerException extends Exception {</p>
<p>final String message = &quot;超载&quot;;</p>
<p>public String warnMess() {</p>
<p>​    return message;</p>
<p>}</p>
<p>}</p>
<p>class CargoBoat {</p>
<p>int realContent; //装载的重量</p>
<p>int maxContent;  //最大装载量</p>
<p>public void setMaxContent(int c) {</p>
<p>​     maxContent = c;</p>
<p>}</p>
<p>public void loading(int m) throws DangerException {</p>
<p>​    realContent += m;</p>
<p>​    if(realContent&gt;maxContent) {</p>
<p>​     throw new DangerException();</p>
<p>​    }</p>
<p>​    System.out.println(&quot;目前装载了&quot;+realContent+&quot;吨货物&quot;);</p>
<p>}</p>
<p>}</p>
<p>public class Example7_7 {</p>
<p>public static void main(String args[]) {</p>
<p>CargoBoat ship = new CargoBoat();</p>
<p>ship.setMaxContent(1000);</p>
<p>int m =0;</p>
<p>try{</p>
<p>​     Scanner scanner = new Scanner(System.in);</p>
<p>​     System.out.println(&quot;请输入装载量（最大量1000）&quot;);</p>
<p>​     m = scanner.nextInt();</p>
<p>​      ship.loading(m);</p>
<p>​      System.out.println(&quot;请输入装载量（最大量1000）&quot;);</p>
<p>​      m = scanner.nextInt();</p>
<p>​      ship.loading(m);</p>
<p>​      System.out.println(&quot;请输入装载量（最大量1000）&quot;);</p>
<p>​      m = scanner.nextInt();</p>
<p>​      ship.loading(m);</p>
<p>​      System.out.println(&quot;请输入装载量（最大量1000）&quot;);</p>
<p>​      m = scanner.nextInt();</p>
<p>​      ship.loading(m);</p>
<p>}</p>
<p>catch(DangerException e) {</p>
<p>​      System.out.println(e.warnMess());</p>
<p>​      System.out.println(&quot;无法再装载重量是&quot;+m+&quot;吨的集装箱&quot;);</p>
<p>}</p>
<p>finally {</p>
<p>​     System.out.printf(&quot;货船将正点启航&quot;);</p>
<p>}</p>
<p>}</p>
<p>}<img src="https://muwenhua.github.io/post-images/1608698409374.jpg" alt="" loading="lazy"></p>
<p>//如有问题请致邮箱 rainhao@223@gmail.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA的对象由特征到抽象类与接口]]></title>
        <id>https://muwenhua.github.io/post/java-de-dui-xiang-you-te-zheng-dao-chou-xiang-lei-yu-jie-kou/</id>
        <link href="https://muwenhua.github.io/post/java-de-dui-xiang-you-te-zheng-dao-chou-xiang-lei-yu-jie-kou/">
        </link>
        <updated>2020-11-26T14:50:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id=""><img src="https://muwenhua.github.io/post-images/1606739357359.jpg" alt="" loading="lazy"></h2>
<p>在了解抽象类与接口之前，我们需要首先明白面向对象的三大特征：封装、多态与继承<br>
1.1 封装<br>
封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法 ，这里只是为了举例子）。</p>
<pre><code>public class Student {
private int id;//id属性私有化
private String name;//name属性私有化

//获取id的方法
public int getId() {
return id;
}

//设置id的方法
public void setId(int id) {
this.id = id;
}

//获取name的方法
public String getName() {
return name;
}

//设置name的方法
public void setName(String name) {
     this.name = name;
}
</code></pre>
<p>}<br>
1.2. 继承<br>
不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p>
<p>关于继承如下 3 点请记住：</p>
<p>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。<br>
子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<br>
子类可以用自己的方式实现父类的方法。（以后介绍）。<br>
1.3. 多态<br>
多态，顾名思义，表示一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。</p>
<p>多态的特点:<br>
对象类型和引用类型之间具有继承（类）/实现（接口）的关系；<br>
对象类型不可变，引用类型可变；<br>
方法具有多态性，属性不具有多态性；<br>
引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；<br>
多态不能调用“只在子类存在但在父类不存在”的方法；<br>
如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</p>
<p>1.3.1. 在一个静态方法内调用一个非静态成员为什么是非法的?<br>
由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p>
<p>1.3.2. 静态方法和实例方法有何不同<br>
在外部调用静态方法时，可以使用&quot;类名.方法名&quot;的方式，也可以使用&quot;对象名.方法名&quot;的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p>
<p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p>
<h2 id="以上内容来自httpsgithubcomsnailclimbjavaguideblobmasterdocsjavabasis">//以上内容来自https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basis</h2>
<p>抽象类其实就是包含着抽象方法的类，抽象方法即为：在一个类里面有成员函数和成员变量，成员函数的组成是：访问修饰符+返回值类型+函数名+参数表+函数体<br>
例如<br>
public void fun () { }  缺一不可。<br>
抽象函数顾名思义就是函数的抽象，它与函数的关系就好比类与对象的关系一样。<br>
抽象类的组成是：<br>
访问修饰符+abstract关键字+返回值类型 +函数名+参数表+分号<br>
例如：<br>
public abstract void fun() ;   //区别多了一个abstract关键字且没有函数体，取而代之的是分号。<br>
2.1抽象方法<br>
只有在抽象类中才能定义抽象方法，所以抽象类也应该有abstract关键字。<br>
格式是abstract + class +类名<br>
例如 ：abstract class people {}   //抽象方法没有分号，也不能实例化对象<br>
抽象方法存在的意义只能被类继承，然后重写它的抽象方法之后这个类才可以实例化对象。类是对象的抽象，那么抽象类就是类的抽象。</p>
<p>2.2抽象方法和抽象类的意义<br>
抽象方法是抽象类的核心，有了抽象方法的抽象类才有灵魂。抽象方法的意义在于：当我们继承了一个抽象类的时候，抽象方法的存在迫使我们必须要重写抽象方法才能实现类的使用。</p>
<p><strong>补充：重载和重写的区别</strong><br>
重载：<br>
（1）就是同样的一个方法能够根据输入数据的不同，做出不同的处理<br>
（2）发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。<br>
<strong>重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</strong></p>
<p>重写：<br>
（1）当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法<br>
（2）返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。<br>
（3）如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。<br>
（4）构造方法无法被重写<br>
<strong>重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</strong></p>
<p>2.3抽象类和接口的联系与区别<br>
（1）抽象类可以存在普通成员函数，而接口中只能存在public abstract 方法。<br>
（2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。<br>
（3）抽象类只能继承一个，接口可以实现多个。</p>
<p>//如有问题请致邮箱 rainhao@223@gmail.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java语言中 类相关问题的描述]]></title>
        <id>https://muwenhua.github.io/post/guan-yu-java-zhong-lei-xiang-guan-wen-ti-de-miao-shu/</id>
        <link href="https://muwenhua.github.io/post/guan-yu-java-zhong-lei-xiang-guan-wen-ti-de-miao-shu/">
        </link>
        <updated>2020-10-20T11:25:44.000Z</updated>
        <content type="html"><![CDATA[<p>1.类是对具体对象的抽象，必须先定义类，才能创建该类的<strong>对象</strong>。</p>
<p>类包含属性和行为：<br>
属性被称为成员变量或字段，行为被称为 成员方法（Member Method 方法即为C语言中的函数）</p>
<p>例：定义person类</p>
<p>person.java</p>
<p>​	public class person {  //定义person类</p>
<p>​	String name;</p>
<p>​	int age；</p>
<p>public void say (String content)</p>
<p>​	{</p>
<p>​	System.out.print(content);</p>
<p>​	}</p>
<p>}</p>
<p>public void person main ()</p>
<p>{</p>
<p>​	person p;  				//使用person类定义一个person类型的变量，此处的person本质可类比int float</p>
<p>​	p= new person(); 	//通过new调用给person的构造器，返回一个person实例，并且可对p变量赋值</p>
<p>​	System.out.print(p.name);		//可以通过对象调用</p>
<p>​	p.say();									//引用方法</p>
<p>}</p>
<ol>
<li>
<p>new：申请空间，并放入堆内存</p>
<p>3.创建一个person实例后，也就是person对象。该对象被赋给p。Java的对象有以下作用</p>
</li>
</ol>
<p>​		3.1对象是本身已知的事物：被称为实例变量</p>
<p>​		3.2对象是可以执行的动作，此时被称为：方法<br>
-&gt;对象是类设计中的一部分,类是对象设计的“蓝图”<br>
4.暂无 目前只学了这么多<br>
//第一次写blog 如若有问题请联系博主</p>
]]></content>
    </entry>
</feed>